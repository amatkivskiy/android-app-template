//--------------  KTLint Configuration  -------------------
 configurations {
     ktlint
 }

 task ktlint(type: JavaExec, group: "verification") {
     description = "Check Kotlin code style."
     classpath = configurations.ktlint
     main = "com.github.shyiko.ktlint.Main"
     args "src/**/*.kt", "--color"
     // to generate report in checkstyle format prepend following args:
     // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
     // see https://github.com/shyiko/ktlint#usage for more
 }

 check.dependsOn ktlint

 task ktlintFormat(type: JavaExec, group: "formatting") {
     description = "Fix Kotlin code style deviations."
     classpath = configurations.ktlint
     main = "com.github.shyiko.ktlint.Main"
     args "-F", "src/**/*.kt"
 }

//--------------  JACOCO Configuration  -------------------

jacoco {
    toolVersion = '0.8.2-SNAPSHOT'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task('jacocoReports') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for all variants"
}

variants().all { variant ->
    def variantName = variant.name
    def variantCapName = variant.name.capitalize()
    def variantTask = task("jacoco${variantCapName}Report", type: JacocoReport, dependsOn: "test${variantCapName}UnitTest") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for $variantCapName"
        enabled = true
        reports {
            xml.enabled = true
            html.enabled = true
            csv.enabled = false
        }

        def fileFilter = ['**/R.class',
                          '**/R$*.class',
                          /* This  is made intentionally cause the focus should be on business logic */
                          'com/github/amatkivskiy/template/presentation/**',

                          '**/BuildConfig.*',
                          '**/Manifest*.*',
                          '**/*Test*.*',
                          'android/**/*.*',
                          '**/*_Factory.*',
                          '**/*_MembersInjector.*',
                          '**/*ActivityStarter.*',
                          '**/dagger/**'
        ]
        def classTree = fileTree(
                dir: variant.javaCompiler.destinationDir,
                excludes: fileFilter
        ) + fileTree(
                dir: "$buildDir/tmp/kotlin-classes/$variantName",
                excludes: fileFilter
        )

        sourceDirectories = files([
                "src/main/java", "src/main/kotlin",
                "src/$variantName/java", "src/$variantName/kotlin"
        ])
        classDirectories = files([classTree])
        executionData = files("${buildDir}/jacoco/test${variantCapName}UnitTest.exec")
    }
    jacocoReports.dependsOn variantTask
}

check.dependsOn jacocoReports

def variants() {
    if (project.android.hasProperty('libraryVariants')) {
        return project.android.libraryVariants
    } else {
        return project.android.applicationVariants
    }
}

//--------------  Gnag Configuration  -------------------

gnag {
    enabled true
    failOnError true
    ktlint {
        enabled true
    }
    androidLint {
        enabled true
        severity 'Error'
    }
    github {
        rootUrl 'https://api.github.com/repos/'
        repoName 'amatkivskiy/android-app-template'
        authToken "$System.env.GITHUB_TOKEN"
        issueNumber "$System.env.BITRISE_PULL_REQUEST"
  }
}