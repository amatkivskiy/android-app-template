def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = "001"

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'gnag'
apply from: 'plugins-config.gradle'

android {
    compileSdkVersion setup.compileSdk

    defaultConfig {
        applicationId setup.applicationId
        minSdkVersion setup.minSdk
        targetSdkVersion setup.targetSdk

        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild.toInteger()

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
        }
    }

    signingConfigs {
        debug {
            storeFile file("./keys/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        // if set to true (default), stops the build if errors are found.
        abortOnError false
  }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"

    implementation "com.android.support:support-annotations:$versions.supportLibrary"
    implementation "com.android.support:support-v4:$versions.supportLibrary"
    implementation "com.android.support:appcompat-v7:$versions.supportLibrary"
    implementation "com.android.support:recyclerview-v7:$versions.supportLibrary"
    implementation "com.android.support.constraint:constraint-layout:$versions.constraintLayout"
    implementation "com.android.support:design:$versions.supportLibrary"
    implementation "com.github.JakeWharton:kotterknife:$versions.kotlinKnife"
    implementation "com.marcinmoskala.activitystarter:activitystarter:$versions.activitystarter"
    implementation("com.marcinmoskala.activitystarter:activitystarter-kotlin:$versions.activitystarter") {
        transitive = false
    }
    kapt "com.marcinmoskala.activitystarter:activitystarter-compiler:$versions.activitystarter"

    // Dagger 2
    implementation "com.google.dagger:dagger:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofitRxJavaAdapter}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofitGsonConverter}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.loggingInterceptor}"

    // RxJava and RxAndroid
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid"
    implementation "io.reactivex.rxjava2:rxkotlin:${versions.rxKotlin}"

    // Functional
    implementation "com.github.kittinunf.result:result:${versions.result}"
    implementation "com.mcxiaoke.koi:core:${versions.koi}"
    implementation "io.arrow-kt:arrow-data:${versions.arrowData}"

    // Mosby
    implementation "com.hannesdorfmann.mosby3:mvp-nullobject-presenter:$versions.mosby"
    implementation "com.hannesdorfmann.mosby3:mvp-lce:$versions.mosby"

    // RxBinding
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$versions.rxBinding"
    implementation("com.marshalchen.ultimaterecyclerview:library:$versions.recyclerView") {
        exclude group: 'com.android.support'
        exclude group: 'com.github.bumptech.glide'
    }
    implementation("com.squareup.picasso:picasso:$versions.picasso") {
        transitive = false
    }

    // Timber
    implementation "com.jakewharton.timber:timber:$versions.timber"
    // ktlint "com.github.shyiko:ktlint:$versions.klint"

    // Unit Testing

    //    testImplementation "com.squareup.okhttp3:mockwebserver:${versions.mockwebserver}"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    testImplementation "com.nhaarman:mockito-kotlin:${versions.mockitoKotlin}"
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.amshove.kluent:kluent:${versions.kluent}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"

    // Instrumentation Testing
    androidTestImplementation "com.android.support.test:runner:${versions.supportRunner}"
    androidTestImplementation "com.android.support.test:rules:${versions.supportRules}"
}
